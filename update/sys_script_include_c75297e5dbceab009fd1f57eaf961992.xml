<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_udg_q.Usuari</api_name>
        <caller_access/>
        <client_callable>true</client_callable>
        <description/>
        <name>Usuari</name>
        <script><![CDATA[var Usuari = Class.create();
Usuari.prototype = {
    initialize: function(usuari) {
        this.usuari = usuari; //sys_id d'un usuari
    },

    addSGQ: function(sgq_id) {
        var gr = new GlideRecord("sys_user");
        if (gr.get(this.usuari)) {
            var l = new ListUtil(gr.x_udg_q_sgq_visibles);
            if (!l.isInList(sgq_id)) { //no esta inclós, encara
                l.addToList(sgq_id);
                if (gr.x_udg_q_sgq_actual == '')
                    gr.x_udg_q_sgq_actual = sgq_id;
                gr.x_udg_q_sgq_visibles = l.getList();
                gr.update();
            }
        }
    },

    setSGQ: function(sgq_id) {
        var gr = new GlideRecord("sys_user");
        if (gr.get(this.usuari)) {
            gr.x_udg_q_sgq_actual = sgq_id;
            gr.update();
        }
    },

    getSgqActual: function() {
        var gr = new GlideRecord("sys_user");
        gr.get(this.usuari);
        return gr.x_udg_q_sgq_actual;
    },

    actualitzaPreferencia: function(preferencia, nouValor) { //Actualitza o la crea si no existeix

        var grP = new GlideRecord('sys_user_preference');
        grP.addEncodedQuery("name=" + preferencia + "^user=" + this.usuari);
        grP.query();
        if (grP.next()) { //L'usuari té aquesta preferència
            grP.value = nouValor;
            new log("Actualizem preferencia " + preferencia + " de " + grP.user.name + " a " + nouValor);
            grP.update();
        } else { //l'usuari no té la preferència
            grP.initialize();
            grP.user = this.usuari;
            grP.name = preferencia;
            grP.value = nouValor;
            new log("Insertem preferencia " + preferencia + " de " + grP.user.name + " a " + nouValor);
            grP.insert(); //Inserta
        }
    },

    esborraPreferencia: function(preferencia) { //Esborra

        var grP = new GlideRecord('sys_user_preference');
        grP.addEncodedQuery("name=" + preferencia + "^user=" + this.usuari);
        grP.query();
        if (grP.next()) { //L'usuari té aquesta preferència
            grP.deleteRecord();
            new log("Esborrem preferència " + preferencia + " de " + grP.user.name);
        }
    },



    _getSysIdRol: function(rol) {
        var grUserRole = new GlideRecord('sys_user_role');
        grUserRole.get('name', rol);
        return grUserRole.sys_id.toString();
    },

    _getRoleIdByName: function(role) {
        var gr = new GlideRecord("sys_user_role");
        gr.addQuery("name", role);
        gr.query();
        if (gr.next())
            return gr.sys_id;
        else
            return "";
    },

    hasRol: function(rol) {
        var idRol = this._getSysIdRol(rol);
        var gr1 = new GlideRecord('sys_user_has_role');
        gr1.addQuery('user', this.usuari);
        gr1.addQuery('role', idRol);
        gr1.query();
        return gr1.next();
    },

    setRol: function(rol) {
        var idRol = this._getSysIdRol(rol);
        var gr1 = new GlideRecord('sys_user_has_role');
        gr1.addQuery('user', this.usuari);
        gr1.addQuery('role', idRol);
        gr1.addQuery('inherited', false);
        gr1.query();
        if (!gr1.next()) {
            gr1.initialize();
            gr1.user = this.usuari;
            gr1.role = idRol;
            new log("Afegim Rol " + rol + " per " + gr1.user.name);
            gr1.insert();
        }
    },

    delRol: function(rol) {
        var idRol = this._getSysIdRol(rol);
        var gr1 = new GlideRecord('sys_user_has_role');
        gr1.addQuery('user', this.usuari);
        gr1.addQuery('role', idRol);
        gr1.addQuery('inherited', false);
        gr1.query();
        if (gr1.next()) {
            new log("Esborrem Rol " + rol + " per " + gr1.user.name);
            gr1.deleteRecord();
        }
    },

    isManagerUniversitat: function() {
        var gr = new GlideRecord("x_udg_q_gestorsuniversitat");
        gr.addQuery('actiu', true);
        gr.addQuery('usuari', this.usuari);
        gr.setLimit(1);
        gr.query();
        var itIs = gr.next();
        return itIs;
    },

    isManagerModificacio: function() {
        return this.hasRol('x_udg_q.ManagerModificacio');
    },

    isObservador: function(sgq) {
        /*var gr = new GlideRecord("x_udg_q_observador");
        if (sgq) gr.addQuery('sgq', sgq);
        gr.addQuery('actiu', true);
        gr.addQuery('usuari', this.usuari);
        gr.setLimit(1);
        gr.query();
        var itIs = gr.next();
        if (!itIs) { ...... }*/

        var grF = new GlideRecord('x_udg_q_funcio');
        grF.addQuery('sgq', sgq);
        grF.addQuery('activa', true);
        grF.addQuery('acces', true);
        grF.addQuery('readonly', true);
        grF.addQuery('membres', 'CONTAINS', this.usuari);
		//gr.addEncodedQuery("caducitatISNOTEMPTY^caducitatRELATIVEGT@dayofweek@ahead@0");
        grF.setLimit(1);
        grF.query();
        var itIs = grF.hasNext();
        return itIs;
    },

    isManager: function(sgq) {
        var gr = new GlideRecord("x_udg_q_sgq");
        if (!sgq) return false;
        gr.addQuery('sys_id', sgq);
        gr.addQuery('actiu', true);
        var qc = gr.addQuery('responsable.usuari', this.usuari);
        qc.addOrCondition('responsable.suport', 'CONTAINS', this.usuari);
        qc.addOrCondition('propietari.usuari', this.usuari);
        qc.addOrCondition('propietari.suport', 'CONTAINS', this.usuari);
        gr.setLimit(1);
        gr.query();
        var itIs = gr.next();
        return itIs;
    },

    isUser: function(sgq) {
        var grF = new GlideRecord('x_udg_q_funcio');
        grF.addQuery('sgq', sgq);
        grF.addQuery('activa', true);
        grF.addQuery('acces', true);
        grF.addQuery('readonly', false);
        var qc = grF.addQuery('membres', 'CONTAINS', this.usuari);
        qc.addOrCondition('suport', 'CONTAINS', this.usuari);
        grF.setLimit(1);
        grF.query();
        var itIs = grF.hasNext();
        //new log("Resposta isUser per "+sgq+" de "+this.usuari+" -> "+itIs);
        return itIs;
    },

    sgqVisibles: function() {
        var llistaSgq = [];
        var grSgq = new GlideRecord('x_udg_q_sgq');
        grSgq.addQuery('actiu', true);
        grSgq.query();
        while (grSgq.next()) {
            if (this.isManagerUniversitat() ||
                this.isManagerModificacio() ||
                this.isManager(grSgq.sys_id) ||
                this.isUser(grSgq.sys_id) ||
                this.isObservador(grSgq.sys_id)) {
                llistaSgq.push(grSgq.sys_id.toString());
            }
        }
        return llistaSgq.toString();
    },

    setAllRoles: function(sgq) { //sgq : sys_id del sgq
        //new log("setAllRoles per "+this.usuari+ " al SGQ: "+sgq);

        if (this.isManagerUniversitat())
            this.setRol('x_udg_q.ManagerUniversitat');
        else
            this.delRol('x_udg_q.ManagerUniversitat');

        if (this.isManager(sgq))
            this.setRol('x_udg_q.Manager');
        else
            this.delRol('x_udg_q.Manager');

        if (this.isUser(sgq))
            this.setRol('x_udg_q.User');
        else
            this.delRol('x_udg_q.User');

        if (this.isObservador(sgq))
            this.setRol('x_udg_q.Observador');
        else
            this.delRol('x_udg_q.Observador');
    },

    actualitzaGR: function(gr) {

        if (this.usuari != gr.sys_id) { //per seguretat, no hauria de passar
            this.usuari = gr.sys_id;
            new log("Error al cridar Usuari.actualitzaGR per " +
                this.usuari + " i " + gr.sys_id, "error");
        }

        gr.x_udg_q_sgq_visibles = this.sgqVisibles();
        var llista_visibles = gr.x_udg_q_sgq_visibles.split(',');
        var actual = gr.x_udg_q_sgq_actual.toString();
        if (llista_visibles.length > 0) { //Hi ha sgq a llista_visibles
            if (llista_visibles.indexOf(actual) == -1) { //sgq_actual no esta entre els visibles o és buit
                gr.x_udg_q_sgq_actual = llista_visibles[0].toString();
            }
            this.setAllRoles(gr.x_udg_q_sgq_actual);
        } else { //No hi ha cap sgq a la llista_visibles
            gr.x_udg_q_sgq_actual = "";
            this.setAllRoles("cap");
        }
        gr.update();
    },

    actualitzaPreferenciesSGQ: function(gr) {

        if (gr.x_udg_q_sgq_actual != "") {
            if (gr.sys_id == gs.getUserID()) { //Estem actualitzant el mateix usuari loginat
                gs.getUser().savePreference('qualitat.sgqActual', gr.x_udg_q_sgq_actual.toString());
                gs.getUser().savePreference('qualitat.sgqActualCodi', gr.x_udg_q_sgq_actual.codi.toString());
            } else { //actualitza preferencies de this a la taula
                this.actualitzaPreferencia('qualitat.sgqActual', gr.x_udg_q_sgq_actual);
                this.actualitzaPreferencia('qualitat.sgqActualCodi', gr.x_udg_q_sgq_actual.codi);
            }
        } else {
            //No es pot per permisos 
            //this.esborraPreferencia('qualitat.sgqActual');
            //this.esborraPreferencia('qualitat.sgqActualCodi');
        }
    },

    type: 'Usuari'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>adminsanti</sys_created_by>
        <sys_created_on>2018-11-28 12:02:08</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>c75297e5dbceab009fd1f57eaf961992</sys_id>
        <sys_mod_count>161</sys_mod_count>
        <sys_name>Usuari</sys_name>
        <sys_package display_value="UdG Qualitat" source="x_udg_q">29219b8737df5f001acdf01643990e33</sys_package>
        <sys_policy>read</sys_policy>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="UdG Qualitat">29219b8737df5f001acdf01643990e33</sys_scope>
        <sys_update_name>sys_script_include_c75297e5dbceab009fd1f57eaf961992</sys_update_name>
        <sys_updated_by>adminsanti</sys_updated_by>
        <sys_updated_on>2020-05-07 14:10:48</sys_updated_on>
    </sys_script_include>
</record_update>
